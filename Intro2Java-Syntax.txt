http://mobile.tutsplus.com/tutorials/android/java-tutorial/

I. Variables
==========
Primitive data type - int, float, char...
Java Objects
*Scope defined by {}

II. Attributes = Fields = Properties
===============================
Class member variables (should be static)

III. Class counterparts for Primitive Types
===============================
The following Java code instantiates a integer variable called iVal, then creates an Integer object using a constructor that takes an integer, and then uses an handle method available in the Integer class to extract a float variable equivalen:
int iVal = 1;
Integer integ1= new Integer(iVal);
float f = integ1.floatValue();

*For a list of common Java data types, the Android reference includes documentation for the java.lang package. You can also find the common input/output objects in the java.io package.
*For more complex data structures like lists, queues, stacks, dates, and times, appropriate classes are in the java.util package.

IV. Class Permissions and Access
================================
The access levels are: public, protected and private. 
*Accessible from outside a class, use public. 
*Accessible from the class itself, use private. 
*Use protected when the class or any of its subclasses need access.

V. Passing by Value vs by reference
================================================================
In Java, method parameters are passed by value. 
However, when a method parameter is an object (that is, anything except a primitive type), only a reference to that object is passed into the method [much like pointers, sorry!]. 
Therefore, in order to modify the object passed into a given method, you generally pass in the object reference, and then act upon it, which modifies the underlying data of the object you passed in.
Example:
Here, we have a class called Cat:

    public class Cat {  
        private String mCatName;  
        Cat(String name) {  
            mCatName=name;  
        }  
        public String getName() {  
            return mCatName;  
        };  
        public void setName(String strName) {  
            mCatName = strName;  
        };  
    }  

Now, let’s try to use this class and pass a Cat object into some functions and see what happens:
    
    void messWithCat(Cat kitty) {  
        kitty = new Cat("Han");  
    }  
    void changeKitty(Cat kitty) {  
        kitty.setName("Wookie");  
    }  
    Cat haveKitten()  
    {  
        Cat kitten = new Cat("Luke");  
        return kitten;  
    }  

Finally, let’s call these methods and see how they act upon Cat object instances:

    Cat cat1 = new Cat("Jabba");  
    Cat cat2 = new Cat("Leia");  
    cat1.getName();    // Returns Jabba  
    cat2.getName();    // Returns Leia  
    messWithCat(cat1); //Passes by object reference so can't change unless use class methods 
    changeKitty(cat2); //This changes object using class methods 
    Cat cat3 = haveKitten();  
    cat1.getName();    // Returns Jabba – Note that object remains unchanged!  
    cat2.getName();    // Returns Wookie -- Works! 
    cat3.getName();    // Returns Luke  


OOP
======
OOP, an object can be thought of much like a custom data type. 
For example, you might have a Dog object, which represents the blueprint for a generic dog, with a name, breed, and gender. 
You could then create different instances of the Dog object to represent specific dogs. Each Dog object must be created by 
calling its constructor (a method that has the same name as the object itself, and may or may not have parameters for setting initial values). For example, the following Dog objects use a constructor with three parameters (name, breed, gender):

Dog dog1 = new Dog("Lassie", collie, female);
Dog dog2 = new Dog("Fifi", poodle, female);
Dog dog3 = new Dog("Asta", foxterrier, male);

class provides definition of object ("Dog" class/object) in Dog.java
class describes data and behavior of object
class behavior is defined using methods (or subroutine/function in procedural language)
"Lassie" is instance object of the class "Dog"

Inheritance
===================================================
The below Fish class can have two subclasses with all the features and defines object specific things using extend keywords

    public class SaltwaterFish extends Fish  
    {  
        @Override  
        public void makeBabyFish(Fish fishSpouse, int numBabies) {  
            // call parent method  
            super.makeBabyFish(fishSpouse, numBabies);  
            // eat mate  
            eat(fishSpouse);  
        }  
    }  

public class Fish {  
  
    private String mSpecies;  
    private String mColor;  
    private int mSize;  
  
    Fish() {  
        // generic fish  
        mSpecies = "unknown";  
        mColor = "unknown";  
        mSize = 0;  
    }  
  
    Fish(String species, String color, int size) {  
        mSpecies = species;  
        mColor = color;  
        mSize = size;  
    }  
    public void eat() {  
        // eat some algae  
    };  
          
    public void eat(Fish fishToEat) {  
        // eat another fish!  
    };  
          
    public void sleep() {  
        // sleep  
    };  
          
    public void makeBabyFish(Fish fishSpouse, int numBabies) {  
        // Make numBabies worth of baby fish with Fish spouse  
    };  

Interfaces to organize object behavior
=============================================
interface defines behavior that can be applied to object

    public interface Swimmer  
    {  
        void startSwimming();  
        void stopSwimming();  
        void dive();   
        void surface();   
    }  

A class like Fish could then implement the Swimmer interface (using the implements keyword) and provide implementations of the swimming behavior:

public class Fish implements Swimmer {
    // Provide implementations of the four methods within the Swimmer interface 
}

Packages
========================
Class hierarchies, such as our fish classes, can then be organized into packages. A package is simply a set of classes and interfaces, bundled together. Developers use namespaces to uniquely name packages. For example, we could use com.mamlambo.aquarium or com.ourclient.project.subproject as our package name to keep track of our fish-related classes.k



