http://stackoverflow.com/questions/1001714/how-to-create-war-files

You can use Ant to set up, compile, WAR, and deploy your solution.

<target name="default" depends="setup,compile,buildwar,deploy"></target>

You can then execute one click in Eclipse to run that Ant target. Here are examples of each of the steps:
Preconditions

We'll assume that you have your code organized like:

    ${basedir}/src: Java files, properties, XML config files
    ${basedir}/web: Your JSP files
    ${basedir}/web/lib: Any JARs required at runtime
    ${basedir}/web/META-INF: Your manifest
    ${basedir}/web/WEB-INF: Your web.xml files

Set up

Define a setup task that creates the distribution directory and copies any artifacts that need to be WARred directly:

<target name="setup">
    <mkdir dir="dist" />
    <echo>Copying web into dist</echo>
    <copydir dest="dist/web" src="web" />
    <copydir dest="dist/web/WEB-INF/lib" src="${basedir}/../web/WEB-INF/lib" />
</target>

Compile

Build your Java files into classes and copy over any non-Java artifacts that reside under src but need to be available at runtime (e.g. properties, XML files, etc.):

<target name="compile">
    <delete dir="${dist.dir}/web/WEB-INF/classes" />
    <mkdir dir="${dist.dir}/web/WEB-INF/classes" />
    <javac destdir="${dist.dir}/web/WEB-INF/classes" srcdir="src">
        <classpath>
            <fileset dir="${basedir}/../web/WEB-INF/lib">
                  <include name="*" />
            </fileset>
        </classpath>
    </javac>
    <copy todir="${dist.dir}/web/WEB-INF/classes">
        <fileset dir="src">
            <include name="**/*.properties" />
            <include name="**/*.xml" />
        </fileset>
    </copy>
</target>

Build WAR

Create the WAR itself:

<target name="buildwar">
    <war basedir="${basedir}/dist/web" destfile="My.war"
     webxml="${basedir}/dist/web/WEB-INF/web.xml">
        <exclude name="WEB-INF/**" />
        <webinf dir="${basedir}/dist/web/WEB-INF/">
            <include name="**/*.jar" />
        </webinf>
    </war>
</target>

Deploy

Finally, you can set up a task to deploy the WAR directly into your Tomcat deploy location:

<target name="deploy">
    <copy file="My.war" todir="${tomcat.deploydir}" />
</target>

Click and go!

Once all this is set up, simply launching the default target from Eclipse will compile, WAR, and deploy your solution.

The advantage of this approach is that it will work outside Eclipse as well as within Eclipse and can be used to easily share your deployment strategy (e.g. via source control) with other developers who are also working on your project.
share|improve this answer
    
edited Jan 20 '11 at 0:40
martin clayton
26.4k44169
    
answered Jun 16 '09 at 14:22
David Citron
4,56152652
    
    
well I want to deploy it to tomcat. How should I change the targer? – ultraman Jun 18 '09 at 17:27
    
Could you please elaborate? As long as ${tomcat.deploydir} points to your Tomcat context deployment directory, that should do it. No? – David Citron Jun 18 '09 at 22:27
    
Why is there " <exclude name="WEB-INF/**" />" in the buildwar target – user63904 Jul 27 '11 at 11:52
    
Is there a Maven equivalent solution? – Matthew Doucette Dec 19 '11 at 17:47
Was this post useful to you?     
